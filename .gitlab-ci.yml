image: node:latest

# 定义阶段的执行顺序 分为5个阶段
stages:
  - install
  - test
  - build-dist
  - build-image
  - deploy

# 在流水线中使用package.json缓存node_modules,只要package.json内容没变就一直使用缓存
cache:
  key:
    files:
      - package.json
  paths:
    - node_modules

# 定义安装npm包的job
install: # job的名称
  stage: install # 定义job的阶段 必须属于stages中的一个
  tags:
    - myubuntu1 # 使用tag为myubuntu1的runner去执行该job
  script:
    - npm install --registry=http://registry.npm.taobao.org

# 定义代码验证的job
code-lint:
  stage: test
  tags:
    - myubuntu1
  script:
    - npm run lint
  allow_failure: true # 运行失败,代码验证失败后仍然会执行后续job

# 定义编译的job
build-dist:
  stage: build-dist
  tags:
    - myubuntu1
  script:
    - npm run build
  # artifacts:
  #   paths:
  #     - dist
  only: # 只在master分支编译,为了能够
    - master

# 定义构建镜像
build-image:
  image: $DOCKER_IMG # 依赖的基础镜像
  stage: build-image
  tags:
    - myubuntu1
  script:
    - docker login -u $HARBOR_USERNAME -p $HARBOR_PWD $HARBOR_URL # 登录镜像仓库
    - docker build -t $APP_IMAGE_NAME . # 构建镜像
    - docker push $APP_IMAGE_NAME # 推送镜像
    - docker rmi $APP_IMAGE_NAME # 删除本地镜像
  only:
    - master

deploy:
  image: $DOCKER_IMG
  stage: deploy
  tags:
    - myubuntu1
  script:
    # 如果有容器名为$APP_CONTAINER_NAME的容器在运行则强行上删除
    - if [ $(docker ps -aq --filter name=$APP_CONTAINER_NAME) ]; then docker rm -f $APP_CONTAINER_NAME;fi

    # 登录镜像仓库
    - docker login -u $HARBOR_USERNAME -p $HARBOR_PWD $HARBOR_URL

    # 使用8001端口,镜像名为$APP_CONTAINER_NAME的后台方式 运行一个镜像
    - docker run -d -p 8001:80 --name $APP_CONTAINER_NAME $APP_IMAGE_NAME
    - echo 'deploy product websit success
  only:
    - master
  when: manual # 手动执行,需要点击
